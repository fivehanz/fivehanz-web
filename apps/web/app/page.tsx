'use client';

import { Box, CSSObject, useTheme } from '@mui/material';
import HeaderSection from '../components/header-section/header-section';
import HeroSection from '../components/hero-section/hero-section';
import ProjectSection from '../components/project-section/project-section';
import AboutSection from '../components/about-section/about-section';
import ContactSection from '../components/contact-section/contact-section';
import FooterSection from '../components/footer-section/footer-section';
import ProgressBar from '../components/progress-bar/progress-bar';

// use SWR and fetch on client side
const projects: Project[] = [
  {
    id: '1',
    name: 'Project 1',
    subtitle: 'Subtitle 1',
    description: 'Description 1',
    tags: [{ id: '1', name: 'Tag 1' }],
    links: [{ id: '1', title: 'Link 1', href: 'https://link1.com' }],
  },
  {
    id: '2',
    name: 'Project 2',
    subtitle: 'Subtitle 2',
    description: 'Description 2',
    tags: [{ id: '2', name: 'Tag 2' }],
    links: [{ id: '2', title: 'Link 2', href: 'https://link2.com' }],
  },
];

// https://api.hashnode.com/
// {
//   user(username: "fivehanz") {
//     publication {
//       posts(page: 0) {
//         slug
//         title
//         views
//         dateAdded
//         dateUpdated
//       }
//     }
//     publicationDomain
//     numPosts
//   }
// }
const blogs: Blogpost[] = [
  {
    creator: 'Haniel R. (Hanz)',
    description:
      '<p>Are you struggling to wrap your head around what a Linux Kernel is? Don\'t worry - you\'re not alone! Here\'s everything you need to know about Linux Kernel, the core of the popular Linux operating systems.</p>\n<p>The Linux kernel was created by Linus Torvalds in 1991 as a free and open-source alternative to proprietary operating systems.</p>\n<p>Initially, it was a simple operating system for personal computers, but over time, it has evolved into a highly scalable and versatile platform used by individuals, companies, and governments around the world.</p>\n<h1 id="heading-what-does-it-do">what does it do?</h1>\n<p>The Linux kernel acts like a middleman between hardware and software, managing and allocating all the resources of your computer, such as the CPU, RAM, and other devices.</p>\n<p><img src="https://media2.giphy.com/media/p2Ow6zI8NbaCeBnpHV/giphy.gif?cid=ecf05e4766zdql28c6bfqtst4ayrfcuatjl754o9mozj3cbi&amp;rid=giphy.gif&amp;ct=g" alt="Football Sport GIF by ElevenSportsBE" class="image--center mx-auto" /></p>\n<p>This central component makes it incredibly easy for programmers to write and use other programs.</p>\n<p>Imagine having to manually manage and allocate resources every time you wanted to write a program - talk about a hassle!</p>\n<p>But with the Linux kernel, all of that is taken care of for you.</p>\n<p>It provides a software layer that acts as the middle man, handling all the resource management and freeing up the programmer to focus on what\'s important - writing great code.</p>\n<h1 id="heading-what-are-the-tasks-performed-by-the-kernel">what are the tasks performed by the kernel?</h1>\n<h2 id="heading-process-scheduling">process scheduling</h2>\n<p>Linux is a <em>preemptive multitasking</em> operating system.</p>\n<ul>\n<li><p>multiple processes can simultaneously reside in memory and each may receive the use of the CPU. (<em>multitasking</em>)</p>\n</li>\n<li><p>the rules governing which processes receive use of the CPU and for how long are determined by the kernel process scheduler. (<em>preemptive</em>)</p>\n</li>\n</ul>\n<p>So, <em>preemptive multitasking</em> is a fancy way of saying that an operating system can run multiple tasks at the same time and switch between them as needed, allowing for more efficient use of the computer\'s resources.</p>\n<h2 id="heading-memory-management">memory management</h2>\n<p>Linux employs virtual memory management, a technique that has two main advantages.</p>\n<ul>\n<li><p>processes are isolated from one another and the kernel, so, the process can\'t read or modify the memory of another process or the kernel.</p>\n</li>\n<li><p>only part of the process needs to be kept in memory, which allows more processes to be held in RAM simultaneously.</p>\n</li>\n</ul>\n<h2 id="heading-provision-of-file-system">provision of file system</h2>\n<p>The kernel provides for the provisioning of a file system which allows access to the resources stored on the disk and makes them available to the user.</p>\n<h2 id="heading-creation-and-termination-of-the-process">creation and termination of the process</h2>\n<p>The kernel can load a new program into memory, providing it with the required resources.</p>\n<p>An instance of a running program is termed a <em>process.</em></p>\n<p>The kernel ensures that the resources it uses are freed after a process has completed execution.</p>\n<h2 id="heading-access-to-devices">access to devices</h2>\n<p>The kernel provides an interface that standardizes and simplifies access to components of a computer system, such as memory, storage, processors, and other hardware devices.</p>\n<p>It serves as a bridge between software applications and hardware components, allowing hardware devices to be used without any knowledge of their inner workings.</p>\n<p>The kernel allows for efficient, reliable, and secure communication between hardware and software components, making it easier for users to access and control these components.</p>\n<h2 id="heading-networking">networking</h2>\n<p>The kernel implements the physical layer, the data link layer, the network layer and the transport layer of the Transmission Control Protocol/Internet Protocol (TCP/IP) layered model.</p>\n<p>Each of these layers is responsible for a different portion of the communication process.</p>\n<p>The physical layer manages the transmission of raw data across physical media such as cables. The data link layer defines the method for physically addressing nodes, as well as controlling the flow of data transmission.</p>\n<p>The network layer is responsible for organizing and routing data across multiple networks and hosts.</p>\n<p>The transport layer enables processes to communicate directly with each other and manages the delivery of data from source to destination.</p>\n<h2 id="heading-provision-of-system-call-api">provision of system call API</h2>\n<p>Processes can request the kernel to perform various tasks using kernel entry points known as <strong><em>system calls</em></strong>.</p>\n<p>These tasks can include managing files, creating and deleting processes, allocating memory, and other system operations.</p>\n<p>System calls provide an interface between a process and the kernel, allowing user-level programs to interact with the operating system.</p>\n<p>So in <strong>summary</strong>, the Linux kernel helps decide which things your computer should do at the same time, takes care of your computer\'s memory, helps you use your files, starts and stops programs, and talks to your computer\'s parts so they work together, helps you connect to the internet, and gives instructions to the programs you use.</p>\n<p>All this makes sure your computer is happy and works well!</p>\n<h1 id="heading-wait-what-about-linux-distributions">wait, what about Linux distributions?</h1>\n<p>The terms "Linux kernel" and "Linux distribution" are often used interchangeably, but they refer to two distinct components of a Linux operating system.</p>\n<p><img src="https://media0.giphy.com/media/xYHscQ1Np55i8/giphy.gif?cid=ecf05e47vw4tkpnbvd0zexkokqpk1csr37th8zh2zaomo2th&amp;rid=giphy.gif&amp;ct=g" alt="The Office What GIF" class="image--center mx-auto" /></p>\n<p>Think of the Linux kernel as the foundation of a house. It\'s the backbone of the operating system, managing resources like the CPU and RAM, and providing a connection between hardware and software.</p>\n<p>Now, imagine building a whole house on top of that foundation. That\'s what a Linux distribution is!</p>\n<p>It takes the Linux kernel and adds all the extra components that make it a complete and usable operating system, such as a graphical user interface, text editor, and more.</p>\n<p>A Linux distribution is what an end-user interacts with, and it is what gives a Linux operating system its unique features and capabilities.</p>\n<p>One of the key factors in the success of the Linux kernel is its open-source nature, which allows developers to freely access, modify, and distribute the source code.</p>\n<p>This has led to the creation of many different distributions, or "distros," each with its unique features and applications.</p>\n<p>So, to sum it up - the Linux kernel is the <strong>foundation</strong>, while a Linux distribution is the complete <strong>house</strong> built on top of that foundation.</p>\n<h1 id="heading-conclusion">conclusion</h1>\n<p>So there you have it - the Linux kernel is a crucial component that not only increases the power and flexibility available to programmers but also leads to a more stable and efficient system.</p>\n<p>Who would have thought that such a small piece of software could have such a big impact?</p>\n<p><img src="https://media3.giphy.com/media/FRtBXn74pIKjTsXvMP/giphy.gif?cid=ecf05e47j7s1a9bqz28425nba07966y8v9o9bnomvsa9pce8&amp;rid=giphy.gif&amp;ct=g" alt="Me Too Help GIF by nounish -" class="image--center mx-auto" /></p>\n<p>In summary, the Linux kernel is a remarkable success story and a testament to the power of open-source development.</p>\n<h1 id="heading-sources">sources</h1>\n<p>Kerrisk, M. (2018) Chapter 2, in <em>The linux programming interface a linux und UNIX system programming handbook</em>. San Francisco, CA: No Starch Press, pp. 2124.</p>',
    guid: 'https://blog.fivehanz.xyz/wtf-is-a-linux-kernel',
    link: 'https://blog.fivehanz.xyz/wtf-is-a-linux-kernel',
    pubDate: 'Sat, 04 Feb 2023 19:02:12 GMT',
    title: 'wtf is a Linux kernel?',
  },
  {
    creator: 'Haniel R. (Hanz)',
    description:
      '<p>Have you been looking for a budget method to set up a realistic Kubernetes cluster? Here is a method to configure a cluster with your unused laptop and learn Kubernetes along the way.</p>\n<h1 id="heading-0-install-proxmox-on-your-spare-laptop-desktop-device">0. Install Proxmox on your spare laptop / desktop / device</h1>\n<h2 id="heading-01-what-is-proxmox">0.1 what is proxmox?</h2>\n<p>Proxmox, specifically Proxmox Virtual Environment (VE), is an open-source server for virtualization management with a built-in web user interface.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1667630996406/rrjIWdYfZ.png" alt="proxmox ve.png" /></p>\n<h2 id="heading-02-why-use-proxmox">0.2 why use proxmox?</h2>\n<p>Proxmox is a complete suite with all the nuts and bolts included, as it comes with almost everything you need to run complete enterprise-level virtualization solutions.</p>\n<p><em>Of course, it\'s free!</em></p>\n<p>If you\'re new to virtualization, then it is useful to know that Proxmox is a type-1 hypervisor.</p>\n<p><em>What is a type-1 hypervisor?</em></p>\n<p>Type-1 hypervisors can provide significant performance for virtualization compared to your run-of-the-mill type-2 hypervisors (<em>like VirtualBox.</em>)</p>\n<p>Type-1 hypervisors are also known as "bare-metal hypervisors." <a target="_blank" href="https://www.technewstoday.com/type-1-vs-type-2-hypervisor/">click here to learn more</a>.</p>\n<h2 id="heading-03-how-to-install">0.3 how to install?</h2>\n<p>It is out of scope for a detailed guide on installing Proxmox in this article. I have linked relevant articles and tutorials to install and configure Proxmox below.</p>\n<p>If you have installed any operating system on a laptop or a computer, you must be able to download and install it easily.</p>\n<p>Download Proxmox VE from <a target="_blank" href="https://proxmox.com/en/downloads/item/proxmox-ve-7-2-iso-installer">here.</a></p>\n<h1 id="heading-1-create-rocky-linux-9-vms-on-proxmox-ve">1. Create Rocky Linux 9 VMs on Proxmox VE</h1>\n<h2 id="heading-11-prerequisites">1.1 prerequisites</h2>\n<p>Before we create a virtual machine instance of Rocky Linux, we need to download the installation file.</p>\n<h3 id="heading-111-download-installation-file">1.1.1 download installation file</h3>\n<p>Download the file from <a target="_blank" href="https://rockylinux.org/download">here.</a></p>\n<p>I used the <em>x86_64</em> minimal ISO for Rocky 9.</p>\n<p>Click the upload button as indicated and upload the file.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1667635888536/oub2lyGm2.png" alt="iso-upload.png" /></p>\n<p>It should look something like this.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1667635997231/sKS1nm2rr.png" alt="iso-uploaded.png" /></p>\n<h2 id="heading-12-create-vm">1.2 create VM</h2>\n<p>Now we are ready to create the required virtual machines.</p>\n<p>My device has 4 cores (<em>2 cores, 4 threads</em>) with 8 GB of RAM. Hence, I allocated 2 cores with 4 GB of RAM for the control node and 1 core with 2 GB of RAM for the worker node.</p>\n<p>You may add more worker nodes if you have the resources.</p>\n<h3 id="heading-121-create">1.2.1 create</h3>\n<p>Now, click on the "Create VM" button.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1667637609074/I6HmuAnvt.png" alt="create vm.png" /></p>\n<h3 id="heading-122-configure">1.2.2 configure</h3>\n<p>Fill out the name and desired VM ID, and click Next.</p>\n<p>In my case, "k8s-control" and "k8s-node1" are the names of the control node and the worker node, respectively.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1667637895742/N_ujyShy9.png" alt="Screenshot 2022-11-05 at 2.10.56 PM.png" /></p>\n<p>Select the installation media, i.e., Rocky Linux 9 ISO, and click Next.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1667638025073/Uwke-Z-jo.png" alt="Screenshot 2022-11-05 at 2.11.12 PM.png" /></p>\n<p>Leave everything at default for "System."</p>\n<p>Select the amount of storage you desire, and then click Next.</p>\n<p>In my case, it is 10 GB in raw disk format.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1667638216705/VV5gn0TVK.png" alt="Screenshot 2022-11-05 at 2.19.13 PM.png" /></p>\n<p>Select your preference of CPU allocation; in my case, it\'s 2 cores for the control node and 1 core for the worker node.</p>\n<p><strong>Select Type as "host," as Rocky Linux 9 will not boot without it.</strong></p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1667638395582/nIJHsA4gv.png" alt="cpu-type.png" /></p>\n<p>Fill in "memory" as per your preference.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1667638509102/mMNjqORZv.png" alt="Screenshot 2022-11-05 at 2.24.13 PM.png" /></p>\n<p>Leave "Network" as the default and finish the process.</p>\n<h3 id="heading-123-install">1.2.3 install</h3>\n<p>Start the VM if not already, and navigate to the "Console" section. You should be able to see the installation screen.</p>\n<p>Fill out the necessary details and begin the installation.</p>\n<p>Create a new user and remember the password.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1667638922417/3QLC3fMXu.png" alt="install.png" /></p>\n<p>Repeat for all the nodes.</p>\n<p>In my case, a control node and a worker node</p>\n<h2 id="heading-13-update-and-optimize">1.3 update and optimize</h2>\n<p>Login to the shell on "<strong>Console</strong>" with your username and password.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1667640484234/JN-wiVsaN.png" alt="Screenshot 2022-11-05 at 2.57.27 PM.png" /></p>\n<h3 id="heading-131-update">1.3.1 update</h3>\n<p>Now, update the system.</p>\n<pre><code class="lang-plaintext">sudo dnf update -y\n</code></pre>\n<p>If the process here works so far, we are on track.</p>\n<h3 id="heading-132-guest-agent">1.3.2 guest agent</h3>\n<p>Now, install <code>qemu-guest-agent</code></p>\n<pre><code class="lang-plaintext">sudo dnf install qemu-guest-agent -y\n</code></pre>\n<p>It is a good idea to do this step; this article explains why and how to configure the guest agent in detail <a target="_blank" href="https://www.itsfullofstars.de/2021/04/proxmox-qemu-guest-agent-installation/">here</a>.</p>\n<h3 id="heading-133-set-hostname">1.3.3 set hostname</h3>\n<p>Check your hostname.</p>\n<pre><code class="lang-plaintext">hostnamectl\n</code></pre>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1667642367539/_IRrebA50.png" alt="hostname.png" /></p>\n<pre><code class="lang-plaintext">sudo hostnamectl set-hostname k8s-control\n</code></pre>\n<p>Set your desired hostname, in my case <code>k8s-control</code> for control-node &amp; <code>k8s-node1</code> for worker-node1.</p>\n<p>Set appropriately.</p>\n<h3 id="heading-134-set-static-ip">1.3.4 set static IP</h3>\n<p>Determine your IP address on your local network.</p>\n<pre><code class="lang-bash">ip address\n</code></pre>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1667643698801/EWs84plxQ.png" alt="ip.png" /></p>\n<p>The IP address is assigned by the DHCP server in your router.</p>\n<p>It is recommended to set up a static IP on your router for the nodes. The procedure depends on the router model.</p>\n<h3 id="heading-135-login-with-ssh">1.3.5 login with ssh</h3>\n<p>Check if <code>sshd</code> is running.</p>\n<pre><code class="lang-bash">systemctl status sshd\n</code></pre>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1667644024904/BXTfSUqQo.png" alt="Screenshot 2022-11-05 at 3.56.56 PM.png" /></p>\n<p>Try logging in through SSH from your computer or laptop to the nodes. (not proxmox device)</p>\n<pre><code class="lang-bash">ssh user@192.168.0.82\n</code></pre>\n<p>Replace <code>user</code> with your username and <code>192.168.0.82</code> with your relevant IP.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1667644229279/OuFn5yDMG.png" alt="Screenshot 2022-11-05 at 4.00.14 PM.png" /></p>\n<p>Repeat for all nodes.</p>\n<p>Now we can begin installing Kubernetes.</p>\n<h1 id="heading-2-install-kubernetes">2. Install Kubernetes</h1>\n<h2 id="heading-21-install-k8s-tools-containerd">2.1 install k8s tools, containerd</h2>\n<h3 id="heading-211-kubernetes-repo">2.1.1 kubernetes repo</h3>\n<p>Add the Kubernetes repository to the package manager.</p>\n<pre><code class="lang-bash">cat &lt;&lt;EOF | sudo tee /etc/yum.repos.d/kubernetes.repo\n[kubernetes]\nname=Kubernetes\nbaseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-\\<span class="hljs-variable">$basearch</span>\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg\nEOF\n</code></pre>\n<p>Install <code>kubeadm, kubectl, kubelet</code></p>\n<pre><code class="lang-bash">sudo dnf install -y kubeadm kubectl kubelet\n</code></pre>\n<h3 id="heading-212-containerd">2.1.2 containerd</h3>\n<p>Add docker repo which provides <code>containerd</code> &amp; install it.</p>\n<pre><code class="lang-bash">sudo dnf install dnf-utils -y\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n</code></pre>\n<p>Install it.</p>\n<pre><code class="lang-bash">sudo dnf install -y containerd.io\n</code></pre>\n<p>Configure <code>containerd</code></p>\n<pre><code class="lang-bash">sudo mkdir -p /etc/containerd\nsudo containerd config default | sudo tee /etc/containerd/config.toml\n</code></pre>\n<p>Edit the <code>config.toml</code> file.</p>\n<pre><code class="lang-bash">sudo vi /etc/containerd/config.toml\n</code></pre>\n<p>Find the line with the below text.</p>\n<p>Change <code>SystemdCgroup = false</code> to <code>SystemdCgroup = true</code></p>\n<pre><code class="lang-bash">[plugins.<span class="hljs-string">"io.containerd.grpc.v1.cri"</span>.containerd.runtimes.runc.options]\n  .\n  .\n  SystemdCgroup = <span class="hljs-literal">true</span>\n</code></pre>\n<p><em>Press ESC and type</em><code>:wq</code> to save and exit.</p>\n<p>Enable <code>containerd</code></p>\n<pre><code class="lang-bash">sudo systemctl <span class="hljs-built_in">enable</span> --now containerd.service\n</code></pre>\n<h3 id="heading-211-lock-versions-of-kube-optional">2.1.1 lock versions of kube (optional)</h3>\n<pre><code class="lang-bash">sudo dnf install yum-plugin-versionlock -y\nsudo dnf versionlock kubelet kubeadm kubectl\n</code></pre>\n<h2 id="heading-22-relevant-optimizations">2.2 relevant optimizations</h2>\n<h3 id="heading-221-disable-swap">2.2.1 disable swap</h3>\n<pre><code class="lang-bash">sudo sed -i <span class="hljs-string">\'/swap/d\'</span> /etc/fstab\nsudo swapoff -a\n</code></pre>\n<h3 id="heading-222-disable-selinux">2.2.2 disable <code>selinux</code></h3>\n<pre><code class="lang-bash">sudo setenforce 0\nsudo sed -i <span class="hljs-string">\'s/^SELINUX=enforcing$/SELINUX=permissive/\'</span> /etc/selinux/config\n</code></pre>\n<h3 id="heading-223-enable-bridging-and-ip-forwarding">2.2.3 enable bridging and IP forwarding</h3>\n<pre><code class="lang-bash">sudo vi /etc/sysctl.d/k8s.conf\n</code></pre>\n<p>Add the following text and save the file. <code>:wq</code></p>\n<pre><code class="lang-bash">net.ipv4.ip_forward = 1\nnet.bridge.bridge-nf-call-iptables = 1\nnet.bridge.bridge-nf-call-ip6tables = 1\n</code></pre>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1667713780172/X0ewDFfOQ.png" alt="Screenshot 2022-11-06 at 11.15.02 AM.png" /></p>\n<h3 id="heading-224-enable-kernel-modules">2.2.4 enable kernel modules</h3>\n<pre><code class="lang-bash">sudo vi /etc/modules-load.d/k8s.conf\n</code></pre>\n<p>Add<code>br_netfilter</code> &amp; <code>overlay</code> in each line.</p>\n<p><em>Press ESC and type</em><code>:wq</code> to save and exit.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1667713078490/V_GzphWP3.png" alt="Screenshot 2022-11-06 at 11.07.08 AM.png" /></p>\n<p>Reboot to apply the settings so far.</p>\n<pre><code class="lang-bash">sudo reboot\n</code></pre>\n<p>Check to see if relevant kernel modules are loaded.</p>\n<pre><code class="lang-bash">lsmod | grep br_netfilter\nlsmod | grep overlay\n</code></pre>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1667714548357/32ZoAdv_K.png" alt="Screenshot 2022-11-06 at 11.31.42 AM.png" /></p>\n<h2 id="heading-23-install-kubernetes">2.3 install Kubernetes</h2>\n<h3 id="heading-231-enable-kubelet">2.3.1 enable <code>kubelet</code></h3>\n<pre><code class="lang-bash">sudo systemctl <span class="hljs-built_in">enable</span> --now kubelet.service\n</code></pre>\n<h3 id="heading-232-open-up-ports-with-firewalld">2.3.2 open up ports with <code>firewalld</code></h3>\n<pre><code class="lang-bash">sudo firewall-cmd --permanent --add-port={6443,2379,2380,10250,10251,10252}/tcp\nsudo firewall-cmd --reload\n</code></pre>\n<p><em>Note: I have disabled my firewall completely, as the setup is not accessible from outside my home network.</em></p>\n<h3 id="heading-233-initialize-with-kubeadm-controller-node-only">2.3.3 initialize with <code>kubeadm</code> (<strong>controller-node only</strong>)</h3>\n<pre><code class="lang-bash">sudo kubeadm init --control-plane-endpoint=192.168.0.82 --node-name k8s-control --pod-network-cidr=10.244.0.0/16\n</code></pre>\n<p>If successful, it will print out a few commands for you to run. Copy the worker-node join command and run it in each worker node.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1667717497215/03ZdnuWfs.png" alt="Screenshot 2022-11-06 at 12.16.04 PM.png" /></p>\n<p><strong>Run these commands in the control plane.</strong></p>\n<pre><code class="lang-bash">mkdir -p <span class="hljs-variable">$HOME</span>/.kube\nsudo cp -i /etc/kubernetes/admin.conf <span class="hljs-variable">$HOME</span>/.kube/config\nsudo chown $(id -u):$(id -g) <span class="hljs-variable">$HOME</span>/.kube/config\n</code></pre>\n<p>If, for some reason, the above join command expires or does not work, the below command will regenerate the command.</p>\n<pre><code class="lang-bash">kubeadm token create --print-join-command\n</code></pre>\n<p>Try running the command<code>kubectl get nodes</code> to see the nodes.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1667717790854/FplXWY8HS.png" alt="Screenshot 2022-11-06 at 12.26.19 PM.png" /></p>\n<h3 id="heading-234-install-an-overlay-network">2.3.4 install an overlay network</h3>\n<p>Apply on control plane.</p>\n<pre><code class="lang-bash">kubectl apply -f https://raw.githubusercontent.com/flannel-io/flannel/master/Documentation/kube-flannel.yml\n</code></pre>\n<p>Now the nodes will start to show as <code>Ready</code>.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1667720139474/sKWftV_kG.png" alt="nodes.png" /></p>\n<h3 id="heading-235-check">2.3.5 check</h3>\n<p>Execute a command to get all pods in all namespaces.</p>\n<pre><code class="lang-bash">kubectl get pods -A -o wide\n</code></pre>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1667720860649/YkTBatnuR.png" alt="Screenshot 2022-11-06 at 1.01.31 PM.png" /></p>\n<h2 id="heading-24-beyond">2.4 beyond</h2>\n<p>Kubernetes, by default, does not come with a load balancer built in; hence, you must provide one or find some other workaround.</p>\n<p>I am using MetalLB as a load balancer and NGINX as an ingress controller; documentation for the same is available <a target="_blank" href="https://kubernetes.github.io/ingress-nginx/deploy/baremetal/">here</a>. Some of my relevant config and manifest files are <a target="_blank" href="https://github.com/fivehanz/k8s-files">here</a>.</p>\n<h1 id="heading-references">references</h1>\n<p><em>This blog post is inspired by a video and blog post by Jay at Learn Linux TV. Check out his YouTube video</em> <a target="_blank" href="https://www.youtube.com/watch?v=U1VzcjCB_sY"><em>here</em></a> <em>and the relevant blog post</em> <a target="_blank" href="https://www.learnlinux.tv/how-to-build-an-awesome-kubernetes-cluster-using-proxmox-virtual-environment/"><em>here</em></a><em>.</em></p>\n<p>Tutorials for installing Proxmox VE are available at the links below.</p>\n<p>https://davenewman.tech/blog/install-proxmox-on-a-laptop/</p>\n<p>https://www.youtube.com/watch?v=EfIfoWAV_g8</p>\n<p>https://www.youtube.com/watch?v=_u8qTN3cCnQ</p>\n<p><strong>Connect with me over at Linkedin</strong> <a target="_blank" href="https://www.linkedin.com/in/fivehanz/"><strong>here</strong></a><strong>.</strong></p>',
    guid: 'https://blog.fivehanz.xyz/how-to-setup-a-kubernetes-cluster-with-rocky-linux-9-using-proxmox-ve-on-your-old-laptop',
    link: 'https://blog.fivehanz.xyz/how-to-setup-a-kubernetes-cluster-with-rocky-linux-9-using-proxmox-ve-on-your-old-laptop',
    pubDate: 'Sun, 06 Nov 2022 17:37:07 GMT',
    title:
      'How to setup a Kubernetes cluster with Rocky Linux 9 using Proxmox VE on your old laptop?',
  },
  {
    creator: 'Haniel R. (Hanz)',
    description:
      '<p>Get ready to power up your web development with a sleek and efficient LEMP stack on Rocky Linux 9 - the perfect combination for a smooth and hassle-free setup!</p>\n<h1 id="heading-what-is-a-lemp-stack">what is a LEMP stack?</h1>\n<p>LEMP, short for Linux, NGINX, MariaDB, and PHP, is a popular choice for hosting dynamic web applications.</p>\n<p>NGINX is free software that can handle a variety of tasks like media streaming, caching, load balancing, and web serving. It\'s built for speed and dependability.</p>\n<p>MariaDB Server, on the other hand, is an open-source relational database that was created by the original creators of MySQL and it is also open source.</p>\n<p>Lastly, PHP is an open-source server-side scripting language that\'s commonly used for web development, particularly for creating dynamic web pages.</p>\n<h1 id="heading-what-is-rocky-linux">what is Rocky Linux?</h1>\n<blockquote>\n<p><strong>Rocky Linux</strong> is an open-source enterprise operating system designed to be 100% bug-for-bug compatible with <strong>Red Hat Enterprise Linux</strong>.</p>\n</blockquote>\n<p>So, you may have heard that Red Hat announced they were stopping development on CentOS, which is a version of their Enterprise Linux. But, not to worry! One of the founders of CentOS decided to create Rocky Linux as a replacement to continue its original goals. So, we still have a reliable option.</p>\n<h1 id="heading-set-up-the-virtual-machine-vm-andamp-update">set up the virtual machine (VM) &amp; update</h1>\n<p>For this blog, I\'m using a little VM from Linode, it\'s called a nanode. I set it up with Rocky Linux 9 as the operating system. If you want to check which release your system is running, just run the command I\'ve listed below.</p>\n<pre><code class="lang-bash"><span class="hljs-comment"># cat /etc/os-release </span>\nNAME=<span class="hljs-string">"Rocky Linux"</span>\nVERSION=<span class="hljs-string">"9.0 (Blue Onyx)"</span>\nID=<span class="hljs-string">"rocky"</span>\nID_LIKE=<span class="hljs-string">"rhel centos fedora"</span>\nVERSION_ID=<span class="hljs-string">"9.0"</span>\nPLATFORM_ID=<span class="hljs-string">"platform:el9"</span>\nPRETTY_NAME=<span class="hljs-string">"Rocky Linux 9.0 (Blue Onyx)"</span>\nANSI_COLOR=<span class="hljs-string">"0;32"</span>\nLOGO=<span class="hljs-string">"fedora-logo-icon"</span>\nCPE_NAME=<span class="hljs-string">"cpe:/o:rocky:rocky:9::baseos"</span>\nHOME_URL=<span class="hljs-string">"https://rockylinux.org/"</span>\nBUG_REPORT_URL=<span class="hljs-string">"https://bugs.rockylinux.org/"</span>\nROCKY_SUPPORT_PRODUCT=<span class="hljs-string">"Rocky-Linux-9"</span>\nROCKY_SUPPORT_PRODUCT_VERSION=<span class="hljs-string">"9.0"</span>\nREDHAT_SUPPORT_PRODUCT=<span class="hljs-string">"Rocky Linux"</span>\nREDHAT_SUPPORT_PRODUCT_VERSION=<span class="hljs-string">"9.0"</span>\n</code></pre>\n<p>Alright, before we dive into the main topic, let\'s make sure our system is up to date. You can do that by running the below command. This will check for any updates and install them if there are any available. It\'s always a good idea to keep your system updated for security and performance reasons.</p>\n<pre><code class="lang-bash">dnf update -y\n</code></pre>\n<h1 id="heading-install-and-start-nginx">install and start NGINX</h1>\n<pre><code class="lang-bash">dnf install nginx -y\n</code></pre>\n<p>Alright, now that we\'ve got our system updated, let\'s get Nginx up and running. This way, Nginx will always be ready to serve up your web pages.</p>\n<pre><code class="lang-bash">systemctl <span class="hljs-built_in">enable</span> --now nginx\n</code></pre>\n<p>Alright, one more step before we move on. Let\'s make sure our firewall is set up to allow HTTP and HTTPS services. You can do that by running the command below. This way, your web server will be accessible to the outside world. And don\'t forget to reload to make sure the changes take effect.</p>\n<pre><code class="lang-bash">firewall-cmd --permanent --zone=public --add-service=http\nfirewall-cmd --permanent --zone=public --add-service=https\nfirewall-cmd --reload\n</code></pre>\n<p>Now that we\'ve got Nginx set up and running, let\'s make sure it\'s working properly. One way to do that is by visiting the IP address of the VM in your web browser. If everything is set up correctly, you should see the default Nginx welcome page. So, try it out and see if you can access your web server!</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1666502981421/kzKUWPArf.png" alt="Screenshot 2022-10-23 at 10.59.26 AM.png" /></p>\n<h1 id="heading-install-mariadb-and-php-8">install MariaDB and PHP 8</h1>\n<p>Now let\'s move on to installing MariaDB and getting the server up and running.</p>\n<pre><code class="lang-bash">dnf install mariadb-server\nsystemctl <span class="hljs-built_in">enable</span> --now mariadb\n</code></pre>\n<p>Now let\'s make sure our MariaDB installation is secure. You can do that by running the command below. It will prompt you to set a root password, remove anonymous users, disable remote root login and so on. This way you can make sure your MariaDB is secure and ready to use.</p>\n<pre><code class="lang-bash">mysql_secure_installation\n</code></pre>\n<p>Now let\'s test the database server by running the command below.</p>\n<pre><code class="lang-bash">mysqladmin -u root -p version\n</code></pre>\n<pre><code class="lang-bash">output:\n\nmysqladmin  Ver 9.1 Distrib 10.5.16-MariaDB, <span class="hljs-keyword">for</span> Linux on x86_64\nCopyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.\n\nServer version        10.5.16-MariaDB\nProtocol version    10\nConnection        Localhost via UNIX socket\nUNIX socket        /var/lib/mysql/mysql.sock\nUptime:            1 min 52 sec\n\nThreads: 1  Questions: 21  Slow queries: 0  Opens: 20  Open tables: 13  Queries per second avg: 0.187\n</code></pre>\n<p>Finally, let\'s install PHP.</p>\n<pre><code class="lang-bash">dnf install php php-cli php-fpm php-curl php-mysqlnd \\\n php-gd php-opcache php-zip php-intl php-common php-bcmath \\\n php-json php-readline php-mbstring php-apcu php-xml php-dom -y\n</code></pre>\n<p>Make sure to check the installation by running the command below.</p>\n<pre><code class="lang-plaintext"># php -v\nPHP 8.0.13 (cli) (built: Nov 16 2021 18:07:21) ( NTS gcc x86_64 )\nCopyright (c) The PHP Group\nZend Engine v4.0.13, Copyright (c) Zend Technologies\n    with Zend OPcache v8.0.13, Copyright (c), by Zend Technologies\n</code></pre>\n<p>Edit the <code>php-fpm</code> configuration file for NGINX.</p>\n<pre><code class="lang-bash">vi /etc/php-fpm.d/www.conf\n</code></pre>\n<p>And change user from <code>user=apache</code> and <code>group=apache</code> to <code>nginx</code></p>\n<pre><code class="lang-bash">user = nginx\ngroup = nginx\n</code></pre>\n<p>Execute the command below to add <code>phpinfo()</code> to index.php on the server root.</p>\n<pre><code class="lang-bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">"&lt;?php phpinfo(); ?&gt;"</span> &gt; /usr/share/nginx/html/index.php\n</code></pre>\n<p>Restart NGINX.</p>\n<pre><code class="lang-bash">systemctl restart nginx\n</code></pre>\n<p>Now check the server homepage using the IP address of the virtual machine.</p>\n<p><img src="https://cdn.hashnode.com/res/hashnode/image/upload/v1666505275012/3eiPVsGim.png" alt="Screenshot 2022-10-23 at 11.37.28 AM.png" /></p>\n<h1 id="heading-conclusion">conclusion</h1>\n<p>Now that you\'ve set up your simple web server with NGINX, you might be wondering what to do next. One great next step would be to install WordPress or Laravel from scratch on the same server.</p>\n<p>This will give you a chance to explore more features and functionality that you can do with your server. You can find tutorials and guide on how to do this online and you can always reach out to me if you have any questions.</p>\n<h1 id="heading-lets-connect">let\'s connect</h1>\n<p>Let\'s link over at <a target="_blank" href="https://linkedin.com/in/fivehanz">Linkedin</a> and <a target="_blank" href="https://twitter.com/fivehanz">Twitter</a>!</p>',
    guid: 'https://blog.fivehanz.xyz/effortlessly-set-up-a-lemp-stack-on-rocky-linux-9',
    link: 'https://blog.fivehanz.xyz/effortlessly-set-up-a-lemp-stack-on-rocky-linux-9',
    pubDate: 'Mon, 24 Oct 2022 06:53:45 GMT',
    title: 'Effortlessly Set Up a LEMP Stack on Rocky Linux 9!',
  },
];

export default function Index() {
  const theme = useTheme();

  // Define the styles object
  const styles: CSSObject = {
    fontFamily: 'Manrope, sans-serif',
    background: theme.palette.background.default,
    color: theme.palette.text.primary,
  };

  // Render the component
  return (
    <Box sx={styles}>
      <ProgressBar />
      <HeaderSection />
      <HeroSection blogs={blogs} />
      <ProjectSection projects={projects} />
      <AboutSection />
      <ContactSection />
      <FooterSection />
    </Box>
  );
}
